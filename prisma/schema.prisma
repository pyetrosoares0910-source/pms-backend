generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Stay {
  id               String            @id @default(uuid())
  name             String
  createdAt        DateTime          @default(now())
  position         Int?
  maintenanceTasks MaintenanceTask[]
  rooms            Room[]
}

model Room {
  id               String            @id @default(uuid())
  active           Boolean           @default(true)
  stayId           String?
  description      String?
  title            String
  capacity         Int?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  category         String?
  position         Int?
  maintenanceTasks MaintenanceTask[]
  reservations     Reservation[]
  stay             Stay?             @relation(fields: [stayId], references: [id])
}

model Guest {
  id           String        @id @default(uuid())
  name         String
  email        String?       @unique
  phone        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reservations Reservation[]
}

model Staff {
  id           String   @id @default(uuid())
  name         String
  role         String
  email        String   @unique
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  passwordHash String
  phone        String?
  updatedAt    DateTime @updatedAt
}

model CleaningStaff {
  id        String   @id @default(uuid())
  name      String
  status    String
  createdAt DateTime @default(now())
}

model Maintenance {
  id          String   @id @default(uuid())
  description String
  status      String
  createdAt   DateTime @default(now())
}

model Reservation {
  id           String   @id @default(uuid())
  roomId       String
  checkinDate  DateTime
  checkoutDate DateTime
  guestId      String
  status       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  notes        String?
  guest        Guest    @relation(fields: [guestId], references: [id])
  room         Room     @relation(fields: [roomId], references: [id])
}

model Maid {
  name      String
  bank      String
  createdAt DateTime @default(now())
  pixKey    String
  updatedAt DateTime @updatedAt
  id        Int      @id @default(autoincrement())
  available String[]
  tasks     Task[]
}

model Task {
  id     String   @id @default(uuid())
  date   DateTime
  stay   String
  rooms  String
  maidId Int?
  maid   Maid?    @relation(fields: [maidId], references: [id])
}

model PaymentStatus {
  id     String       @id @default(cuid())
  maidId String
  date   DateTime
  status PaymentState @default(PENDENTE)

  @@unique([maidId, date])
}

model MaintenanceTask {
  id          String            @id @default(uuid())
  code        String            @unique
  title       String
  description String?
  stayId      String?
  roomId      String?
  responsible String?
  status      String            @default("pendente")
  type        String?
  dueDate     DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  isRecurring Boolean           @default(false)
  parentId    String?
  recurrence  Json?
  timezone    String?           @default("America/Sao_Paulo")
  parent      MaintenanceTask?  @relation("RecurringParent", fields: [parentId], references: [id])
  children    MaintenanceTask[] @relation("RecurringParent")
  room        Room?             @relation(fields: [roomId], references: [id])
  stay        Stay?             @relation(fields: [stayId], references: [id])

  @@unique([parentId, dueDate], map: "uniq_parent_dueDate")
  @@index([parentId])
}

enum PaymentState {
  PENDENTE
  PAGO
}
